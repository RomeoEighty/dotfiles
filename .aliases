# vim:ft=bash
#------------------
# general command
#------------------
alias cd..='cd ..'
alias cd...='cd ../..'
alias cd....='cd ../../..'
alias cp='cp -i'
alias desktop='cd ~/Desktop/'
alias rm='rm -iv'
alias trash='cd ~/.Trash/'
alias mv='mv -iv'
alias vi='vim'
#alias ls -G='ls'
#vim /etc/sudoersは無効化すべき

#------------------
# RoboTech
#------------------
if [[ "$(uname)" == 'Darwin' ]]; then
    alias serialload='sudo kextload /System/Library/Extensions/AppleUSBFTDI.kext'
    alias serialunload='sudo kextunload /System/Library/Extensions/AppleUSBFTDI.kext'
    alias findershowpath='defaults write com.apple.finder _FXShowPosixPathInTitle -bool true; killall Finder'
    alias finderhidepath='defaults write com.apple.finder _FXShowPosixPathInTitle -bool false; killall Finder'
    alias tmutil_speedup_backup='sudo sysctl debug.lowpri_throttle_enabled=0'
    alias tmutil_lowpri_backup='sudo sysctl debug.lowpri_throttle_enabled=1'
    alias make-write='make clean; make -j5 && serialunload; make write && serialload'
fi

#------------------
# private aliases
#------------------
alias gcc='gcc -W -Wall'
alias clangw='clang -W -Wall'
alias clangw++='clang++ -std=c++11 -Wall -Wextra -Wconversion'
alias g++='g++ -std=c++11 -Wall -Wextra -Wconversion'
alias showover1gb='sudo du -g -x -d 10 / | awk '\''$1 >= 2 {print} '\'''
alias soall='source ~/.bash_profile; source ~/.bashrc'
alias vialias='vim ~/.aliases'
alias vivimrc='vim ~/.vimrc'
alias nvinit='nvim ~/.config/nvim/init.vim'
if [[ "$(uname)" == 'Darwin' ]]; then
    alias airport='/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport'
    alias brew-update-force='cd $(brew --repo); git fetch; git reset --hard origin/master; brew update'
    # now you can use "brew update --force"
    #alias brsetup='echo -rn "TODO github-keygen"; brew update && brew upgrade && brew doctor 2>&1 1>/dev/null | awk "BEGIN{wcnt = 0; ecnt = 0} /Warning/ {++wcnt} /Error/ {++ecnt} END{print Warning:, wcnt, Error:, ecnt}" | terminal-notifier -title "brew doctor" -message'
    alias brsetup='brew update && brew upgrade --fetch-HEAD && brew doctor 2>&1 | terminal-notifier -title "brew doctor" -group brew_doctor -appIcon https://brew.sh/assets/img/homebrew-256x256.png -message'
    alias brcleanup='brew cleanup -n; brew cleanup; brew cask cleanup -n; brew doctor'
    alias brlist='brew list; printf "\n\n"; brew cask list'
    # prevent .DS_Store file creation over network connections (10.13 - )
    # https://support.apple.com/en-us/HT208209
    # speed up SMB file browsing
    alias disableDSStore='defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool TRUE; echo -en "Then log out of your macOS account and log back in."'
    alias enableDSStore='defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool FALSE; echo -en "Then log out of your macOS account and log back in."'
    alias la='ls -AG'
    alias ls='ls -G'
    alias ll='ls -alG'
    alias watch='watch '

    alias bdav='rsync -v -a --iconv=UTF8-MAC,UTF-8 /Volumes/dav/lecture/2nd_winter ~/Google\ Drive/eeic/dav_lec_1013/'

    copy-file-attr()
    {
        copy-file-attr-usage() {
            printf "usage: copy-file-attr [-v] [-h] [-m | -d] <source_file> <target_file>\n"
            printf "\n"
            printf "   -h   show this help\n"
            printf "   -m   copy file modified date\n"
            printf "   -d   copy file created date\n"
        }

        local OPTIND f_modified f_created
        f_modified=false
        f_created=false
        while getopts "md" o
        do
            case "$o" in
                m)
                    f_modified=true
                    ;;
                d)
                    f_created=true
                    ;;
                *)
                    copy-file-attr-usage
                    return
                    ;;
            esac
        done
        shift $((OPTIND - 1))
        local source_file target_file
        source_file="$1"
        target_file="$2"
        if [[ "$#" != 2 ]]
        then
            printf "ERROR: source file and target file need to be specified\n"
            return
        fi
        if ! test -f "$source_file" && ! test -d "$source_file"
        then
            printf "ERROR: %s is not a regular file nor directory.\n" "$source_file"
            return
        fi
        if ! test -f "$target_file" && ! test -d "$target_file"
        then
            printf "ERROR: %s is not a regular file nor directory.\n" "$target_file"
            return
        fi
        if [[ "$f_created" != true && "$f_modified" != true ]]
        then
            printf "ERROR: Either -m or -d needs to be specified\n"
            return
        fi
        printf "source_file: %s\n" "$source_file"
        printf "target_file: %s\n" "$target_file"
        if [[ "$f_modified" == true ]]
        then
            local source_file_modified target_file_modified
            source_file_modified=$(GetFileInfo -m "$source_file")
            target_file_modified=$(GetFileInfo -m "$target_file")
            printf "%s modified date: \n" "$target_file"
            printf "    %s -> %s\n" "$target_file_modified" "$source_file_modified"
            SetFile -m "$source_file_modified" "$target_file"
        fi
        if [[ "$f_created" == true ]]
        then
            local source_file_created target_file_created
            source_file_created=$(GetFileInfo -d "$source_file")
            target_file_created=$(GetFileInfo -d "$target_file")
            printf "%s created date: \n" "$target_file"
            printf "    %s -> %s\n" "$target_file_created" "$source_file_created"
            SetFile -d "$source_file_created" "$target_file"
        fi
    }
fi
if [[ "$(uname)" == 'Linux' ]]; then
    alias la='ls -a --color'
    alias ls='ls --color'
    alias ll='ls -al --color'
    alias open='xdg-open'
fi
